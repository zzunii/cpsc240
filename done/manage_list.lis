     1                                  ; =====================================================================================================================
     2                                  ; Program name: "Array Management System". This program demonstrates how to pass an array
     3                                  ; Through assembly language and gathers the sum of the array. The max array length is 8.
     4                                  ; Copyright (C) 2023 Dylan Zuniga
     5                                  ; =====================================================================================================================
     6                                  ; Author Information
     7                                  ;     Author Name: Dylan Zuniga
     8                                  ;     Author Email: zuniga18dz@csu.fullerton.edu
     9                                  ;
    10                                  ; Program Information
    11                                  ;     Program Name: Array Management System
    12                                  ;     Programming Languages: One module in C, four in x86
    13                                  ;     Date Program Began: 2023-Sep-05
    14                                  ;     Date Program Completed: 2023-Sep-24
    15                                  ;     Date Comments Upgraded: 2023-Sep-24
    16                                  ;     Files in the program: main.c, manage.asm, input_array.asm, output_array.asm, sum_array.asm, run.sh
    17                                  ;     Status: Completed. Challenge Part not present in program.
    18                                  ;
    19                                  ; Purpose (Academic)
    20                                  ;     Allow's the user to input 8 numbers into an array and get the total sum of the array
    21                                  ;
    22                                  ; This file
    23                                  ;     File Name: manage.asm
    24                                  ;     Langauge: x86
    25                                  ;     Syntax: Intel
    26                                  ;     Assemble: nasm -f elf64 -l manage_list.lis -o manage-asm.o manage.asm
    27                                  ;     Link: gcc -m64 c-output.o manage-asm.o input-asm.o output-asm.o sum-asm.o -o arrayzz -fno-pie -no-pie -std=c++17
    28                                  ; ===== Begin code area ===============================================================================================
    29                                  
    30                                  global manage
    31                                  extern input_array
    32                                  extern output_array
    33                                  extern sum_array
    34                                  extern printf
    35                                  extern callf
    36                                  
    37                                  max_size equ 8
    38                                  
    39                                  section .data
    40 00000000 57652077696C6C2074-         intro_ db "We will take care of all of your array needs.", 10, 0
    40 00000009 616B65206361726520-
    40 00000012 6F6620616C6C206F66-
    40 0000001B 20796F757220617272-
    40 00000024 6179206E656564732E-
    40 0000002D 0A00               
    41 0000002F 506C6561736520696E-         prompt db "Please input float numbers seperated by WS. After the last number, press WS followed by control-d", 10, 0
    41 00000038 70757420666C6F6174-
    41 00000041 206E756D6265727320-
    41 0000004A 736570657261746564-
    41 00000053 2062792057532E2041-
    41 0000005C 667465722074686520-
    41 00000065 6C617374206E756D62-
    41 0000006E 65722C207072657373-
    41 00000077 20575320666F6C6C6F-
    41 00000080 77656420627920636F-
    41 00000089 6E74726F6C2D640A00 
    42 00000092 5468616E6B20796F75-         thanks db "Thank you. The numbers in the array are: ",10, 0
    42 0000009B 2E20546865206E756D-
    42 000000A4 6265727320696E2074-
    42 000000AD 686520617272617920-
    42 000000B6 6172653A200A00     
    43 000000BD 5468652073756D206F-         final1 db "The sum of numbers in the array is %.10f",10, 0
    43 000000C6 66206E756D62657273-
    43 000000CF 20696E207468652061-
    43 000000D8 727261792069732025-
    43 000000E1 2E3130660A00       
    44 000000E7 5468616E6B20796F75-         final2 db "Thank you for using Array Management System.",10, 0
    44 000000F0 20666F72207573696E-
    44 000000F9 67204172726179204D-
    44 00000102 616E6167656D656E74-
    44 0000010B 2053797374656D2E0A-
    44 00000114 00                 
    45                                  
    46 00000115 257300                      stringformat db "%s", 0
    47 00000118 256C6600                    floatformat db "%lf", 0
    48                                  
    49                                  section .bss
    50 00000000 <res 40h>                   array resq max_size
    51                                  
    52                                  section .text
    53                                  
    54                                  
    55                                  manage:
    56                                  ; =======================================
    57                                  ;  * * * * * * * 16 PUSHES * * * * * * *
    58                                  ; =======================================
    59 00000000 55                          push       rbp                                              
    60 00000001 4889E5                      mov        rbp, rsp                                         
    61 00000004 53                          push       rbx                                              
    62 00000005 51                          push       rcx                                              
    63 00000006 52                          push       rdx                                              
    64 00000007 56                          push       rsi                                              
    65 00000008 57                          push       rdi                                              
    66 00000009 4150                        push       r8                                               
    67 0000000B 4151                        push       r9                                               
    68 0000000D 4152                        push       r10                                              
    69 0000000F 4153                        push       r11                                              
    70 00000011 4154                        push       r12                                              
    71 00000013 4155                        push       r13                                              
    72 00000015 4156                        push       r14                                              
    73 00000017 4157                        push       r15                                              
    74 00000019 9C                          pushf
    75                                  
    76                                  ; =======================================
    77                                  ;  * *  * START OF THE APPLICATION * * * 
    78                                  ; =======================================
    79                                  
    80                                  ; Print intro_
    81 0000001A B800000000                  mov rax, 0
    82 0000001F 48BF-                       mov rdi, stringformat
    82 00000021 [1501000000000000] 
    83 00000029 48BE-                       mov rsi, intro_
    83 0000002B [0000000000000000] 
    84 00000033 E8(00000000)                call printf
    85                                  
    86                                  ; Print first prompt
    87                                  
    88 00000038 B800000000                  mov rax, 0
    89 0000003D 48BF-                       mov rdi, stringformat
    89 0000003F [1501000000000000] 
    90 00000047 48BE-                       mov rsi, prompt
    90 00000049 [2F00000000000000] 
    91 00000051 E8(00000000)                call printf
    92                                  
    93                                  ; block to call input_array
    94                                  
    95 00000056 B800000000                  mov rax, 0
    96 0000005B 48BF-                       mov rdi, array              ; Sends array
    96 0000005D [0000000000000000] 
    97 00000065 BE08000000                  mov rsi, max_size           ; Sends number of cells
    98 0000006A E8(00000000)                call input_array
    99 0000006F 4889C3                      mov rbx, rax                ; stores array length in rbx
   100                                  
   101                                  ; Input Arrary done check
   102 00000072 48BF-                       mov rdi, stringformat
   102 00000074 [1501000000000000] 
   103 0000007C 48BE-                       mov rsi, thanks
   103 0000007E [9200000000000000] 
   104 00000086 E8(00000000)                call printf
   105                                  
   106 0000008B B800000000                  mov rax, 0
   107 00000090 48BF-                       mov rdi, array
   107 00000092 [0000000000000000] 
   108 0000009A 4889DE                      mov rsi, rbx
   109 0000009D E8(00000000)                call output_array
   110                                  
   111 000000A2 B800000000                  mov rax, 0
   112 000000A7 48BF-                       mov rdi, array
   112 000000A9 [0000000000000000] 
   113 000000B1 4889DE                      mov rsi, rbx
   114 000000B4 E8(00000000)                call sum_array
   115 000000B9 6A00                        push qword 0
   116 000000BB F2440F110424                movsd [rsp], xmm8
   117                                  
   118 000000C1 6A00                        push qword 0
   119 000000C3 B801000000                  mov rax, 1
   120 000000C8 48BF-                       mov rdi, final1
   120 000000CA [BD00000000000000] 
   121 000000D2 F2410F10C0                  movsd xmm0, xmm8 
   122 000000D7 E8(00000000)                call printf
   123 000000DC 58                          pop rax
   124                                  
   125 000000DD F2410F10C0                  movsd xmm0, xmm8
   126 000000E2 58                          pop rax
   127                                  
   128 000000E3 B800000000                  mov rax, 0
   129 000000E8 48BF-                       mov rdi, stringformat
   129 000000EA [1501000000000000] 
   130 000000F2 48BE-                       mov rsi, final2
   130 000000F4 [E700000000000000] 
   131 000000FC E8(00000000)                call printf
   132                                  
   133                                  
   134                                  ; =======================================
   135                                  ;  * * * * * * * 16 PUSHES * * * * * * *
   136                                  ; =======================================
   137 00000101 9D                          popf                                                        
   138 00000102 415F                        pop        r15                                              
   139 00000104 415E                        pop        r14                                              
   140 00000106 415D                        pop        r13                                              
   141 00000108 415C                        pop        r12                                              
   142 0000010A 415B                        pop        r11                                              
   143 0000010C 415A                        pop        r10                                              
   144 0000010E 4159                        pop        r9                                               
   145 00000110 4158                        pop        r8                                               
   146 00000112 5F                          pop        rdi                                              
   147 00000113 5E                          pop        rsi                                              
   148 00000114 5A                          pop        rdx                                              
   149 00000115 59                          pop        rcx                                              
   150 00000116 5B                          pop        rbx                                              
   151 00000117 5D                          pop        rbp      
   152                                  
   153 00000118 C3                          ret
   154                                  
   155                                  
