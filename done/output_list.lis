     1                                  ; =====================================================================================================================
     2                                  ; Program name: "Array Management System". This program demonstrates how to pass an array
     3                                  ; Through assembly language and gathers the sum of the array. The max array length is 8.
     4                                  ; Copyright (C) 2023 Dylan Zuniga
     5                                  ; =====================================================================================================================
     6                                  ; Author Information
     7                                  ;     Author Name: Dylan Zuniga
     8                                  ;     Author Email: zuniga18dz@csu.fullerton.edu
     9                                  ;
    10                                  ; Program Information
    11                                  ;     Program Name: Array Management System
    12                                  ;     Programming Languages: One module in C, four in x86
    13                                  ;     Date Program Began: 2023-Sep-05
    14                                  ;     Date Program Completed: 2023-Sep-24
    15                                  ;     Date Comments Upgraded: 2023-Sep-24
    16                                  ;     Files in the program: main.c, manage.asm, input_array.asm, output_array.asm, sum_array.asm, run.sh
    17                                  ;     Status: Completed. Challenge Part not present in program.
    18                                  ;
    19                                  ; Purpose (Academic)
    20                                  ;     Allow's the user to input 8 numbers into an array and get the total sum of the array
    21                                  ;
    22                                  ; This file
    23                                  ;     File Name: output_array.asm
    24                                  ;     Langauge: x86
    25                                  ;     Syntax: Intel
    26                                  ;     Assemble: nasm -f elf64 -l output_list.lis -o output-asm.o output_array.asm
    27                                  ;     Link: gcc -m64 c-output.o manage-asm.o input-asm.o output-asm.o sum-asm.o -o arrayzz -fno-pie -no-pie -std=c++17
    28                                  ; ===== Begin code area ===============================================================================================
    29                                  
    30                                  global output_array
    31                                  extern input_array
    32                                  extern sum_array
    33                                  extern manage
    34                                  extern printf
    35                                  extern scanf
    36                                  
    37                                  section .data
    38 00000000 0A00                        newline db "",10,0
    39 00000002 252E3130660A00              floatformat db "%.10f" ,10, 0
    40 00000009 257300                      stringformat db "%s" , 0
    41 0000000C 5468616E6B20796F75-         printnumbers db "Thank you, The numbers in the array are: " ,10,0,
    41 00000015 2C20546865206E756D-
    41 0000001E 6265727320696E2074-
    41 00000027 686520617272617920-
    41 00000030 6172653A200A00     
    42 00000037 252E3130660A00              print_array db "%.10f" ,10,0 
    43                                  
    44                                  section .bss
    45                                  
    46                                  section .text
    47                                  output_array:
    48                                  ; =======================================
    49                                  ;  * * * * * * * 16 PUSHES * * * * * * *
    50                                  ; =======================================
    51 00000000 55                          push       rbp                                              
    52 00000001 4889E5                      mov        rbp, rsp                                         
    53 00000004 53                          push       rbx                                              
    54 00000005 51                          push       rcx                                              
    55 00000006 52                          push       rdx                                              
    56 00000007 56                          push       rsi                                              
    57 00000008 57                          push       rdi                                              
    58 00000009 4150                        push       r8                                               
    59 0000000B 4151                        push       r9                                               
    60 0000000D 4152                        push       r10                                              
    61 0000000F 4153                        push       r11                                              
    62 00000011 4154                        push       r12                                              
    63 00000013 4155                        push       r13                                              
    64 00000015 4156                        push       r14                                              
    65 00000017 4157                        push       r15                                              
    66 00000019 9C                          pushf
    67                                  
    68                                  ; =======================================
    69                                  ;  * *  * START OF THE APPLICATION * * * 
    70                                  ; =======================================
    71                                  
    72 0000001A 4989FD                      mov r13, rdi                        ; Array
    73 0000001D 4989F6                      mov r14, rsi                        ; max num
    74 00000020 4D31FF                      xor r15, r15                        ; r15 = 0
    75                                  
    76                                  begin_loop:
    77                                  
    78 00000023 4D39F7                      cmp r15, r14
    79 00000026 7D20                        jge loop_done
    80                                  
    81 00000028 B801000000                  mov rax, 1
    82 0000002D 48BF-                       mov rdi, print_array
    82 0000002F [3700000000000000] 
    83 00000037 F2430F1044FD00              movsd xmm0, [r13+8*r15]
    84 0000003E E8(00000000)                call printf
    85                                  
    86 00000043 49FFC7                      inc r15
    87                                  
    88 00000046 EBDB                        jmp begin_loop
    89                                  
    90                                  loop_done:
    91                                  
    92 00000048 4831C0                      xor rax, rax
    93                                  
    94                                  ; =======================================
    95                                  ; * * * * * * * * 16 POPS * * * * * * * *
    96                                  ; =======================================
    97 0000004B 9D                          popf                                                        
    98 0000004C 415F                        pop        r15                                              
    99 0000004E 415E                        pop        r14                                              
   100 00000050 415D                        pop        r13                                              
   101 00000052 415C                        pop        r12                                              
   102 00000054 415B                        pop        r11                                              
   103 00000056 415A                        pop        r10                                              
   104 00000058 4159                        pop        r9                                               
   105 0000005A 4158                        pop        r8                                               
   106 0000005C 5F                          pop        rdi                                              
   107 0000005D 5E                          pop        rsi                                              
   108 0000005E 5A                          pop        rdx                                              
   109 0000005F 59                          pop        rcx                                              
   110 00000060 5B                          pop        rbx                                              
   111 00000061 5D                          pop        rbp      
   112                                  
   113 00000062 C3                          ret
   114                                  
   115                                  
   116                                  
